package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"strconv"
	"trabalho-03/internal/domain"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input CreateOrderInput) (*Order, error) {
	order := &domain.Order{
		CustomerID: input.CustomerID,
		Amount:     input.Amount,
		Status:     input.Status,
	}

	err := r.OrderUseCase.CreateOrder(order)
	if err != nil {
		return nil, err
	}

	return &Order{
		ID:         strconv.Itoa(int(order.ID)),
		CustomerID: order.CustomerID,
		Amount:     order.Amount,
		Status:     order.Status,
		CreatedAt:  order.CreatedAt.Format("2006-01-02T15:04:05Z"),
		UpdatedAt:  order.UpdatedAt.Format("2006-01-02T15:04:05Z"),
	}, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*Order, error) {
	orders, err := r.OrderUseCase.ListOrders()
	if err != nil {
		return nil, err
	}

	var gqlOrders []*Order
	for _, order := range orders {
		gqlOrder := &Order{
			ID:         strconv.Itoa(int(order.ID)),
			CustomerID: order.CustomerID,
			Amount:     order.Amount,
			Status:     order.Status,
			CreatedAt:  order.CreatedAt.Format("2006-01-02T15:04:05Z"),
			UpdatedAt:  order.UpdatedAt.Format("2006-01-02T15:04:05Z"),
		}
		gqlOrders = append(gqlOrders, gqlOrder)
	}

	return gqlOrders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
